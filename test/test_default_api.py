# coding: utf-8

"""
    BlockMarkets Cryptocurrency API

    The BlockMarkets API provides real-time and historical market data on cryptocurrencies from the world's leading crypto exchanges. Sign up for a free, unlimited API key at [BlockMarkets Cryptocurrency API](https://www.blockmarkets.io/cryptocurrency-api).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest

import blockmarkets
from blockmarkets.api.default_api import DefaultApi  # noqa: E501
from blockmarkets.rest import ApiException


class TestDefaultApi(unittest.TestCase):
    """DefaultApi unit test stubs"""

    def setUp(self):
        self.api = blockmarkets.api.default_api.DefaultApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_benchmark_rate(self):
        """Test case for benchmark_rate

        Returns the latest available benchmark rates for a specific asset.  # noqa: E501
        """
        pass

    def test_benchmark_rate_history(self):
        """Test case for benchmark_rate_history

        Returns historical benchmark rates for an asset. Requires premium subscription.  # noqa: E501
        """
        pass

    def test_list_asset_markets(self):
        """Test case for list_asset_markets

        Returns a list of all markets (base and quote) for a specific asset.  # noqa: E501
        """
        pass

    def test_list_assets(self):
        """Test case for list_assets

        Returns a list of supported assets.  # noqa: E501
        """
        pass

    def test_list_benchmark_rates(self):
        """Test case for list_benchmark_rates

        Returns a list of supported USD benchmark rates.  # noqa: E501
        """
        pass

    def test_list_exchange_markets(self):
        """Test case for list_exchange_markets

        Returns a list of markets for a specific exchange.  # noqa: E501
        """
        pass

    def test_list_exchanges(self):
        """Test case for list_exchanges

        Returns a list of supported exchanges.  # noqa: E501
        """
        pass

    def test_list_markets(self):
        """Test case for list_markets

        Returns a list of supported markets.  # noqa: E501
        """
        pass

    def test_list_pair_markets(self):
        """Test case for list_pair_markets

        Returns a list of markets for a specific asset pair.  # noqa: E501
        """
        pass

    def test_list_pairs(self):
        """Test case for list_pairs

        Returns a list of supported asset pairs.  # noqa: E501
        """
        pass

    def test_list_spot_rates(self):
        """Test case for list_spot_rates

        Returns a list of supported USD spot rates.  # noqa: E501
        """
        pass

    def test_market_book(self):
        """Test case for market_book

        Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription.  # noqa: E501
        """
        pass

    def test_market_ohlcv(self):
        """Test case for market_ohlcv

        Returns OHLCV history for a market pair.  # noqa: E501
        """
        pass

    def test_market_ticker(self):
        """Test case for market_ticker

        Returns the latest ticker for a market pair.  # noqa: E501
        """
        pass

    def test_market_trades(self):
        """Test case for market_trades

        Returns trades for a market pair. Requires premium subscription.  # noqa: E501
        """
        pass

    def test_spot_rate(self):
        """Test case for spot_rate

        Returns the last USD spot rate for an asset.  # noqa: E501
        """
        pass

    def test_spot_rate_history(self):
        """Test case for spot_rate_history

        Returns historical spot rates for an asset. Requires premium subscription.  # noqa: E501
        """
        pass

    def test_spot_rate_ohlcv(self):
        """Test case for spot_rate_ohlcv

        Returns the OHLCV history for a spot rate.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
