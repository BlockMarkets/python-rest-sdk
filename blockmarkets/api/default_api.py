# coding: utf-8

"""
    BlockMarkets Cryptocurrency API

    The BlockMarkets API provides real-time and historical market data on cryptocurrencies from the world's leading crypto exchanges. Sign up for a free, unlimited API key at [BlockMarkets Cryptocurrency API](https://www.blockmarkets.io/cryptocurrency-api).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from blockmarkets.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def benchmark_rate(self, symbol, **kwargs):  # noqa: E501
        """Returns the latest available benchmark rates for a specific asset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.benchmark_rate(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: The asset symbol (see /assets) (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.benchmark_rate_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.benchmark_rate_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def benchmark_rate_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """Returns the latest available benchmark rates for a specific asset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.benchmark_rate_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: The asset symbol (see /assets) (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['symbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method benchmark_rate" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in local_var_params or
                local_var_params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `benchmark_rate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol' in local_var_params:
            path_params['symbol'] = local_var_params['symbol']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/rates/benchmark/{symbol}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def benchmark_rate_history(self, symbol, **kwargs):  # noqa: E501
        """Returns historical benchmark rates for an asset. Requires premium subscription.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.benchmark_rate_history(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: The asset symbol (see /assets) (required)
        :param str close: The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.benchmark_rate_history_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.benchmark_rate_history_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def benchmark_rate_history_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """Returns historical benchmark rates for an asset. Requires premium subscription.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.benchmark_rate_history_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: The asset symbol (see /assets) (required)
        :param str close: The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['symbol', 'close']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method benchmark_rate_history" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in local_var_params or
                local_var_params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `benchmark_rate_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol' in local_var_params:
            path_params['symbol'] = local_var_params['symbol']  # noqa: E501

        query_params = []
        if 'close' in local_var_params:
            query_params.append(('close', local_var_params['close']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/rates/benchmark/{symbol}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_asset_markets(self, symbol, **kwargs):  # noqa: E501
        """Returns a list of all markets (base and quote) for a specific asset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_asset_markets(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: The asset symbol (see /assets) (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_asset_markets_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.list_asset_markets_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def list_asset_markets_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """Returns a list of all markets (base and quote) for a specific asset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_asset_markets_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: The asset symbol (see /assets) (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['symbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_asset_markets" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in local_var_params or
                local_var_params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `list_asset_markets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol' in local_var_params:
            path_params['symbol'] = local_var_params['symbol']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/assets/{symbol}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_assets(self, **kwargs):  # noqa: E501
        """Returns a list of supported assets.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_assets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_assets_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_assets_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of supported assets.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_assets" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/assets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_benchmark_rates(self, **kwargs):  # noqa: E501
        """Returns a list of supported USD benchmark rates.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_benchmark_rates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_benchmark_rates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_benchmark_rates_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_benchmark_rates_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of supported USD benchmark rates.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_benchmark_rates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_benchmark_rates" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/rates/benchmark', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_exchange_markets(self, exchange, **kwargs):  # noqa: E501
        """Returns a list of markets for a specific exchange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_exchange_markets(exchange, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: The 4-char exchange code (see /exchanges) (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_exchange_markets_with_http_info(exchange, **kwargs)  # noqa: E501
        else:
            (data) = self.list_exchange_markets_with_http_info(exchange, **kwargs)  # noqa: E501
            return data

    def list_exchange_markets_with_http_info(self, exchange, **kwargs):  # noqa: E501
        """Returns a list of markets for a specific exchange.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_exchange_markets_with_http_info(exchange, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: The 4-char exchange code (see /exchanges) (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['exchange']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_exchange_markets" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in local_var_params or
                local_var_params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `list_exchange_markets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in local_var_params:
            path_params['exchange'] = local_var_params['exchange']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/exchanges/{exchange}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_exchanges(self, **kwargs):  # noqa: E501
        """Returns a list of supported exchanges.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_exchanges(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_exchanges_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_exchanges_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_exchanges_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of supported exchanges.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_exchanges_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_exchanges" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/exchanges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_markets(self, **kwargs):  # noqa: E501
        """Returns a list of supported markets.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_markets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_markets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_markets_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_markets_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of supported markets.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_markets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_markets" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/markets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_pair_markets(self, pair, **kwargs):  # noqa: E501
        """Returns a list of markets for a specific asset pair.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pair_markets(pair, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pair: The asset pair (see /pairs) (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_pair_markets_with_http_info(pair, **kwargs)  # noqa: E501
        else:
            (data) = self.list_pair_markets_with_http_info(pair, **kwargs)  # noqa: E501
            return data

    def list_pair_markets_with_http_info(self, pair, **kwargs):  # noqa: E501
        """Returns a list of markets for a specific asset pair.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pair_markets_with_http_info(pair, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pair: The asset pair (see /pairs) (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pair']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pair_markets" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pair' is set
        if ('pair' not in local_var_params or
                local_var_params['pair'] is None):
            raise ValueError("Missing the required parameter `pair` when calling `list_pair_markets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pair' in local_var_params:
            path_params['pair'] = local_var_params['pair']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/pairs/{pair}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_pairs(self, **kwargs):  # noqa: E501
        """Returns a list of supported asset pairs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pairs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_pairs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_pairs_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_pairs_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of supported asset pairs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pairs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pairs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/pairs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_spot_rates(self, **kwargs):  # noqa: E501
        """Returns a list of supported USD spot rates.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_spot_rates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_spot_rates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_spot_rates_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_spot_rates_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of supported USD spot rates.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_spot_rates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_spot_rates" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/rates/spot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_book(self, exchange, pair, **kwargs):  # noqa: E501
        """Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_book(exchange, pair, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: The 4-char exchange code (see /exchanges) (required)
        :param str pair: The asset pair (see /pairs) (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_book_with_http_info(exchange, pair, **kwargs)  # noqa: E501
        else:
            (data) = self.market_book_with_http_info(exchange, pair, **kwargs)  # noqa: E501
            return data

    def market_book_with_http_info(self, exchange, pair, **kwargs):  # noqa: E501
        """Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_book_with_http_info(exchange, pair, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: The 4-char exchange code (see /exchanges) (required)
        :param str pair: The asset pair (see /pairs) (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['exchange', 'pair']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_book" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in local_var_params or
                local_var_params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `market_book`")  # noqa: E501
        # verify the required parameter 'pair' is set
        if ('pair' not in local_var_params or
                local_var_params['pair'] is None):
            raise ValueError("Missing the required parameter `pair` when calling `market_book`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in local_var_params:
            path_params['exchange'] = local_var_params['exchange']  # noqa: E501
        if 'pair' in local_var_params:
            path_params['pair'] = local_var_params['pair']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/markets/{exchange}/{pair}/book', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_ohlcv(self, exchange, pair, **kwargs):  # noqa: E501
        """Returns OHLCV history for a market pair.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_ohlcv(exchange, pair, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: The 4-char exchange code (see /exchanges) (required)
        :param str pair: The asset pair (see /pairs) (required)
        :param int limit: Number of records to retrieve (default=100, max=1000)
        :param int interval: Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default=1440)
        :param str start: Start datetime in ISO 8601
        :param str end: End datetime in ISO 8601
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_ohlcv_with_http_info(exchange, pair, **kwargs)  # noqa: E501
        else:
            (data) = self.market_ohlcv_with_http_info(exchange, pair, **kwargs)  # noqa: E501
            return data

    def market_ohlcv_with_http_info(self, exchange, pair, **kwargs):  # noqa: E501
        """Returns OHLCV history for a market pair.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_ohlcv_with_http_info(exchange, pair, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: The 4-char exchange code (see /exchanges) (required)
        :param str pair: The asset pair (see /pairs) (required)
        :param int limit: Number of records to retrieve (default=100, max=1000)
        :param int interval: Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default=1440)
        :param str start: Start datetime in ISO 8601
        :param str end: End datetime in ISO 8601
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['exchange', 'pair', 'limit', 'interval', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_ohlcv" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in local_var_params or
                local_var_params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `market_ohlcv`")  # noqa: E501
        # verify the required parameter 'pair' is set
        if ('pair' not in local_var_params or
                local_var_params['pair'] is None):
            raise ValueError("Missing the required parameter `pair` when calling `market_ohlcv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in local_var_params:
            path_params['exchange'] = local_var_params['exchange']  # noqa: E501
        if 'pair' in local_var_params:
            path_params['pair'] = local_var_params['pair']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'interval' in local_var_params:
            query_params.append(('interval', local_var_params['interval']))  # noqa: E501
        if 'start' in local_var_params:
            query_params.append(('start', local_var_params['start']))  # noqa: E501
        if 'end' in local_var_params:
            query_params.append(('end', local_var_params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/markets/{exchange}/{pair}/ohlcv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_ticker(self, exchange, pair, **kwargs):  # noqa: E501
        """Returns the latest ticker for a market pair.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_ticker(exchange, pair, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: The 4-char exchange code (see /exchanges) (required)
        :param str pair: The asset pair (see /pairs) (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_ticker_with_http_info(exchange, pair, **kwargs)  # noqa: E501
        else:
            (data) = self.market_ticker_with_http_info(exchange, pair, **kwargs)  # noqa: E501
            return data

    def market_ticker_with_http_info(self, exchange, pair, **kwargs):  # noqa: E501
        """Returns the latest ticker for a market pair.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_ticker_with_http_info(exchange, pair, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: The 4-char exchange code (see /exchanges) (required)
        :param str pair: The asset pair (see /pairs) (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['exchange', 'pair']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_ticker" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in local_var_params or
                local_var_params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `market_ticker`")  # noqa: E501
        # verify the required parameter 'pair' is set
        if ('pair' not in local_var_params or
                local_var_params['pair'] is None):
            raise ValueError("Missing the required parameter `pair` when calling `market_ticker`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in local_var_params:
            path_params['exchange'] = local_var_params['exchange']  # noqa: E501
        if 'pair' in local_var_params:
            path_params['pair'] = local_var_params['pair']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/markets/{exchange}/{pair}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_trades(self, exchange, pair, **kwargs):  # noqa: E501
        """Returns trades for a market pair. Requires premium subscription.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_trades(exchange, pair, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: The 4-char exchange code (see /exchanges) (required)
        :param str pair: The asset pair (see /pairs) (required)
        :param int limit: Number of records to retrieve (default=100, max=1000)
        :param str start: Start datetime in ISO 8601
        :param str end: End datetime in ISO 8601
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_trades_with_http_info(exchange, pair, **kwargs)  # noqa: E501
        else:
            (data) = self.market_trades_with_http_info(exchange, pair, **kwargs)  # noqa: E501
            return data

    def market_trades_with_http_info(self, exchange, pair, **kwargs):  # noqa: E501
        """Returns trades for a market pair. Requires premium subscription.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_trades_with_http_info(exchange, pair, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: The 4-char exchange code (see /exchanges) (required)
        :param str pair: The asset pair (see /pairs) (required)
        :param int limit: Number of records to retrieve (default=100, max=1000)
        :param str start: Start datetime in ISO 8601
        :param str end: End datetime in ISO 8601
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['exchange', 'pair', 'limit', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_trades" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in local_var_params or
                local_var_params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `market_trades`")  # noqa: E501
        # verify the required parameter 'pair' is set
        if ('pair' not in local_var_params or
                local_var_params['pair'] is None):
            raise ValueError("Missing the required parameter `pair` when calling `market_trades`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in local_var_params:
            path_params['exchange'] = local_var_params['exchange']  # noqa: E501
        if 'pair' in local_var_params:
            path_params['pair'] = local_var_params['pair']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'start' in local_var_params:
            query_params.append(('start', local_var_params['start']))  # noqa: E501
        if 'end' in local_var_params:
            query_params.append(('end', local_var_params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/markets/{exchange}/{pair}/trades', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def spot_rate(self, symbol, **kwargs):  # noqa: E501
        """Returns the last USD spot rate for an asset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.spot_rate(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: The asset symbol (see /assets) (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.spot_rate_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.spot_rate_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def spot_rate_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """Returns the last USD spot rate for an asset.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.spot_rate_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: The asset symbol (see /assets) (required)
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['symbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method spot_rate" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in local_var_params or
                local_var_params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `spot_rate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol' in local_var_params:
            path_params['symbol'] = local_var_params['symbol']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/rates/spot/{symbol}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def spot_rate_history(self, symbol, **kwargs):  # noqa: E501
        """Returns historical spot rates for an asset. Requires premium subscription.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.spot_rate_history(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: The asset symbol (see /assets) (required)
        :param int limit: Number of records to retrieve (default=100, max=1000)
        :param str start: Start datetime in ISO 8601
        :param str end: End datetime in ISO 8601
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.spot_rate_history_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.spot_rate_history_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def spot_rate_history_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """Returns historical spot rates for an asset. Requires premium subscription.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.spot_rate_history_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: The asset symbol (see /assets) (required)
        :param int limit: Number of records to retrieve (default=100, max=1000)
        :param str start: Start datetime in ISO 8601
        :param str end: End datetime in ISO 8601
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['symbol', 'limit', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method spot_rate_history" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in local_var_params or
                local_var_params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `spot_rate_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol' in local_var_params:
            path_params['symbol'] = local_var_params['symbol']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'start' in local_var_params:
            query_params.append(('start', local_var_params['start']))  # noqa: E501
        if 'end' in local_var_params:
            query_params.append(('end', local_var_params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/rates/spot/{symbol}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def spot_rate_ohlcv(self, symbol, **kwargs):  # noqa: E501
        """Returns the OHLCV history for a spot rate.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.spot_rate_ohlcv(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: The asset symbol (see /assets) (required)
        :param int limit: Number of records to retrieve (default=100, max=1000)
        :param int interval: Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default=1440)
        :param str start: Start datetime in ISO 8601
        :param str end: End datetime in ISO 8601
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.spot_rate_ohlcv_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.spot_rate_ohlcv_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def spot_rate_ohlcv_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """Returns the OHLCV history for a spot rate.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.spot_rate_ohlcv_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: The asset symbol (see /assets) (required)
        :param int limit: Number of records to retrieve (default=100, max=1000)
        :param int interval: Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default=1440)
        :param str start: Start datetime in ISO 8601
        :param str end: End datetime in ISO 8601
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['symbol', 'limit', 'interval', 'start', 'end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method spot_rate_ohlcv" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in local_var_params or
                local_var_params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `spot_rate_ohlcv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol' in local_var_params:
            path_params['symbol'] = local_var_params['symbol']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'interval' in local_var_params:
            query_params.append(('interval', local_var_params['interval']))  # noqa: E501
        if 'start' in local_var_params:
            query_params.append(('start', local_var_params['start']))  # noqa: E501
        if 'end' in local_var_params:
            query_params.append(('end', local_var_params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/rates/spot/{symbol}/ohlcv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
